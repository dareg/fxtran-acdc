#:set surface_config_file = os.path.dirname(_THIS_FILE_) + '/surface_fields_config.yaml'
#:set surface_config = field_config.VariableConfiguration(surface_config_file)
#:set surface_prognostic = [field_config.VariableGroup(**group) for group in surface_config.schema['prognostic']]
#:set surface_diagnostic = [field_config.VariableGroup(**group) for group in surface_config.schema['diagnostic']]
#:set surface_variable_groups = surface_prognostic + surface_diagnostic

#:set config_file = os.path.dirname(_THIS_FILE_) + '/field_config.yaml'
#:set config = field_config.VariableConfiguration(config_file)
#:set gfl = config.groups['GFL']

MODULE FIELD_REGISTRY_MOD

USE PARKIND1, ONLY : JPIM, JPRB
USE FIELD_MODULE, ONLY: FIELD_2D, FIELD_INT2D, FIELD_LOG2D, FIELD_3D, FIELD_INT3D, FIELD_4D, FIELD_5D, &
 &                      FIELD_2D_EMPTY, FIELD_3D_EMPTY, FIELD_4D_EMPTY, ALLOCATE_FIELD
USE VARIABLE_MODULE, ONLY: VARIABLE_2D, VARIABLE_3D, VARIABLE_4D
USE FIELD_VARIABLES_MOD, ONLY: FIELD_VARIABLES
USE SURFACE_VARIABLES_MOD, ONLY: SURFACE_VARIABLES

IMPLICIT NONE

INTERFACE CREATE_FIELD_WRAP
  MODULE PROCEDURE CREATE_FIELD_WRAP_2D, CREATE_FIELD_WRAP_3D, CREATE_FIELD_WRAP_4D
  MODULE PROCEDURE CREATE_FIELD_WRAP_INT2D, CREATE_FIELD_WRAP_INT3D
  MODULE PROCEDURE CREATE_FIELD_WRAP_PACKED_2D, CREATE_FIELD_WRAP_PACKED_3D, CREATE_FIELD_WRAP_PACKED_4D
END INTERFACE CREATE_FIELD_WRAP

INTERFACE DELETE_TEMPORARY
  MODULE PROCEDURE DELETE_TEMPORARY_2D, DELETE_TEMPORARY_INT2D, DELETE_TEMPORARY_LOG2D
  MODULE PROCEDURE DELETE_TEMPORARY_3D, DELETE_TEMPORARY_INT3D, DELETE_TEMPORARY_4D, DELETE_TEMPORARY_5D
END INTERFACE DELETE_TEMPORARY

CONTAINS

  FUNCTION CREATE_FIELD_WRAP_INT2D(DATA, PERSISTENT, LBOUNDS) RESULT(FIELD_PTR)
    ! Create a single 2D field with implicit blocking dimension by wrapping existing data
    TYPE(FIELD_INT2D), POINTER :: FIELD_PTR
    INTEGER(KIND=JPIM), TARGET, INTENT(IN) :: DATA(:,:)
    LOGICAL, OPTIONAL, INTENT (IN) :: PERSISTENT
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (2)

    ALLOCATE(FIELD_PTR)
    FIELD_PTR = FIELD_INT2D(DATA=DATA, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
  END FUNCTION CREATE_FIELD_WRAP_INT2D

  FUNCTION CREATE_FIELD_WRAP_INT3D(DATA, PERSISTENT, LBOUNDS) RESULT(FIELD_PTR)
    ! Create a single 1D field with implicit blocking dimension by wrapping existing data
    TYPE(FIELD_INT3D), POINTER :: FIELD_PTR
    INTEGER(KIND=JPIM), TARGET, INTENT(IN) :: DATA(:,:,:)
    LOGICAL, OPTIONAL, INTENT (IN) :: PERSISTENT
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (3)

    ALLOCATE(FIELD_PTR)
    FIELD_PTR = FIELD_INT3D(DATA=DATA, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
  END FUNCTION CREATE_FIELD_WRAP_INT3D

  FUNCTION CREATE_FIELD_WRAP_2D(DATA, PERSISTENT, LBOUNDS) RESULT(FIELD_PTR)
    ! Create a single 2D field with implicit blocking dimension by wrapping existing data
    TYPE(FIELD_2D), POINTER :: FIELD_PTR
    REAL(KIND=JPRB), TARGET, INTENT(IN) :: DATA(:,:)
    LOGICAL, OPTIONAL, INTENT (IN) :: PERSISTENT
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (2)

    ALLOCATE(FIELD_PTR)
    FIELD_PTR = FIELD_2D(DATA=DATA, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
  END FUNCTION CREATE_FIELD_WRAP_2D

  FUNCTION CREATE_FIELD_WRAP_3D(DATA, PERSISTENT, LBOUNDS) RESULT(FIELD_PTR)
    ! Create a single 1D field with implicit blocking dimension by wrapping existing data
    TYPE(FIELD_3D), POINTER :: FIELD_PTR
    REAL(KIND=JPRB), TARGET, INTENT(IN) :: DATA(:,:,:)
    LOGICAL, OPTIONAL, INTENT (IN) :: PERSISTENT
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (3)

    ALLOCATE(FIELD_PTR)
    FIELD_PTR = FIELD_3D(DATA=DATA, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
  END FUNCTION CREATE_FIELD_WRAP_3D

  FUNCTION CREATE_FIELD_WRAP_4D(DATA, PERSISTENT, LBOUNDS) RESULT(FIELD_PTR)
    ! Create a single 1D field with implicit blocking dimension by wrapping existing data
    TYPE(FIELD_4D), POINTER :: FIELD_PTR
    REAL(KIND=JPRB), TARGET, INTENT(IN) :: DATA(:,:,:,:)
    LOGICAL, OPTIONAL, INTENT (IN) :: PERSISTENT
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (4)

    ALLOCATE(FIELD_PTR)
    FIELD_PTR = FIELD_4D(DATA=DATA, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)
  END FUNCTION CREATE_FIELD_WRAP_4D

  FUNCTION CREATE_FIELD_WRAP_PACKED_2D(DATA, IDX, LBOUNDS) RESULT(FIELD_PTR)
    ! Create a single 2D field with implicit blocking dimension by wrapping existing data
    TYPE(FIELD_2D), POINTER :: FIELD_PTR
    REAL(KIND=JPRB), TARGET, INTENT(IN) :: DATA(:,:,:)
    INTEGER(KIND=JPIM), INTENT(IN) :: IDX
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (2)

    ALLOCATE(FIELD_PTR)
    FIELD_PTR = FIELD_2D(DATA=DATA, IDX=IDX, LBOUNDS=LBOUNDS)
  END FUNCTION CREATE_FIELD_WRAP_PACKED_2D

  FUNCTION CREATE_FIELD_WRAP_PACKED_3D(DATA, IDX, LBOUNDS) RESULT(FIELD_PTR)
    ! Create a single 1D field with implicit blocking dimension by wrapping existing data
    TYPE(FIELD_3D), POINTER :: FIELD_PTR
    REAL(KIND=JPRB), TARGET, INTENT(IN) :: DATA(:,:,:,:)
    INTEGER(KIND=JPIM), INTENT(IN) :: IDX
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (3)

    ALLOCATE(FIELD_PTR)
    FIELD_PTR = FIELD_3D(DATA=DATA, IDX=IDX, LBOUNDS=LBOUNDS)
  END FUNCTION CREATE_FIELD_WRAP_PACKED_3D

  FUNCTION CREATE_FIELD_WRAP_PACKED_4D(DATA, IDX, LBOUNDS) RESULT(FIELD_PTR)
    ! Create a single 1D field with implicit blocking dimension by wrapping existing data
    TYPE(FIELD_4D), POINTER :: FIELD_PTR
    REAL(KIND=JPRB), TARGET, INTENT(IN) :: DATA(:,:,:,:,:)
    INTEGER(KIND=JPIM), INTENT(IN) :: IDX
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (4)

    ALLOCATE(FIELD_PTR)
    FIELD_PTR = FIELD_4D(DATA=DATA, IDX=IDX, LBOUNDS=LBOUNDS)
  END FUNCTION CREATE_FIELD_WRAP_PACKED_4D

  FUNCTION CREATE_FIELD_EMPTY_2D(SHAPE) RESULT(FIELD_PTR)
    ! Create an empty 2D field object with NULL data pointers
    TYPE(FIELD_2D), POINTER :: FIELD_PTR
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: SHAPE(1)

    ALLOCATE(FIELD_PTR)
    FIELD_PTR = FIELD_2D_EMPTY(SHAPE=SHAPE)
  END FUNCTION CREATE_FIELD_EMPTY_2D

  FUNCTION CREATE_FIELD_EMPTY_3D(SHAPE) RESULT(FIELD_PTR)
    ! Create an empty 3D field object with NULL data pointers
    TYPE(FIELD_3D), POINTER :: FIELD_PTR
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: SHAPE(2)

    ALLOCATE(FIELD_PTR)
    FIELD_PTR = FIELD_3D_EMPTY(SHAPE=SHAPE)
  END FUNCTION CREATE_FIELD_EMPTY_3D

  FUNCTION CREATE_FIELD_EMPTY_4D(SHAPE) RESULT(FIELD_PTR)
    ! Create an empty 4D field object with NULL data pointers
    TYPE(FIELD_4D), POINTER :: FIELD_PTR
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: SHAPE(3)

    ALLOCATE(FIELD_PTR)
    FIELD_PTR = FIELD_4D_EMPTY(SHAPE=SHAPE)
  END FUNCTION CREATE_FIELD_EMPTY_4D

  SUBROUTINE DELETE_TEMPORARY_2D(FIELD_PTR)
    ! Finalize a temporary field and deallocate the pointer
    TYPE(FIELD_2D), POINTER, INTENT(INOUT) :: FIELD_PTR

    CALL FIELD_PTR%FINAL()
    DEALLOCATE(FIELD_PTR)
  END SUBROUTINE DELETE_TEMPORARY_2D

  SUBROUTINE DELETE_TEMPORARY_INT2D(FIELD_PTR)
    ! Finalize a temporary field and deallocate the pointer
    TYPE(FIELD_INT2D), POINTER, INTENT(INOUT) :: FIELD_PTR

    CALL FIELD_PTR%FINAL()
    DEALLOCATE(FIELD_PTR)
  END SUBROUTINE DELETE_TEMPORARY_INT2D

  SUBROUTINE DELETE_TEMPORARY_INT3D(FIELD_PTR)
    ! Finalize a temporary field and deallocate the pointer
    TYPE(FIELD_INT3D), POINTER, INTENT(INOUT) :: FIELD_PTR

    CALL FIELD_PTR%FINAL()
    DEALLOCATE(FIELD_PTR)
  END SUBROUTINE DELETE_TEMPORARY_INT3D

  SUBROUTINE DELETE_TEMPORARY_LOG2D(FIELD_PTR)
    ! Finalize a temporary field and deallocate the pointer
    TYPE(FIELD_LOG2D), POINTER, INTENT(INOUT) :: FIELD_PTR

    CALL FIELD_PTR%FINAL()
    DEALLOCATE(FIELD_PTR)
  END SUBROUTINE DELETE_TEMPORARY_LOG2D

  SUBROUTINE DELETE_TEMPORARY_3D(FIELD_PTR)
    ! Finalize a temporary field and deallocate the pointer
    TYPE(FIELD_3D), POINTER, INTENT(INOUT) :: FIELD_PTR

    CALL FIELD_PTR%FINAL()
    DEALLOCATE(FIELD_PTR)
  END SUBROUTINE DELETE_TEMPORARY_3D

  SUBROUTINE DELETE_TEMPORARY_4D(FIELD_PTR)
    ! Finalize a temporary field and deallocate the pointer
    TYPE(FIELD_4D), POINTER, INTENT(INOUT) :: FIELD_PTR

    CALL FIELD_PTR%FINAL()
    DEALLOCATE(FIELD_PTR)
  END SUBROUTINE DELETE_TEMPORARY_4D

  SUBROUTINE DELETE_TEMPORARY_5D(FIELD_PTR)
    ! Finalize a temporary field and deallocate the pointer
    TYPE(FIELD_5D), POINTER, INTENT(INOUT) :: FIELD_PTR

    CALL FIELD_PTR%FINAL()
    DEALLOCATE(FIELD_PTR)
  END SUBROUTINE DELETE_TEMPORARY_5D


END MODULE FIELD_REGISTRY_MOD



