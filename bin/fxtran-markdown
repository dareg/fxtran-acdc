#!/usr/bin/env perl

use warnings;

use Pod::Markdown;
use FileHandle;
use File::Path;
use Data::Dumper;
use File::Basename;

use strict;

sub desc
{
  my $file = shift;

  my $pod = '';

  my $fhin = 'FileHandle'->new ("<$file");
  
  my $on = 0;
  
  while (my $line = <$fhin>)
    {
      if ($line =~ m/^=head1 DESCRIPTION/o)
        {
          $on = 1;
          $line = "=pod\n";
        }
      elsif ($on && ($line =~ m/^=head1/o))
       {
          $on = 0;
       }
  
      $pod .= $line if ($on);
    }
  
  $pod .= "\n=cut\n";

  return $pod;
}

my $fh = 'FileHandle'->new ('>README.md');

$fh->print (<< "EOF");
# Adaptation des Codes Ã  Divers Calculateurs

![](./images/ACDC.png)

EOF

for my $perl (qw (fxtran-f90 fxtran-boot fxtran-gen fxtran-fix fxtran-makemaker 
                  click Fxtran::Generate Fxtran::SemiImplicit Fxtran::SingleColumn
                  Fxtran::SingleBlock))
  {
    my $f;

    if (-f "bin/$perl")
      {
        $f = "bin/$perl";
      }
    else
      {
        ($f = $perl) =~ s,::,/,go;
        $f = "lib/$f.pm";
        die unless (-f $f);
      }

    my ($pp, $markdown);

    if ($f =~ m/^bin/o)
      {
        my $md = $perl;
        $md = "doc/$md.md";

        $fh->print (<< "EOF");

# [$perl ...](./$md)

EOF

       my $pod = $f =~ m/^bin/o ? &desc ($f) : '';
       $pp = 'Pod::Markdown'->new ();
       $pp->output_string (\$markdown);
       $pp->parse_string_document ($pod);
       $fh->print ($markdown);
     }

#   print &Dumper ([$pod, $markdown]);


    $pp = 'Pod::Markdown'->new 
    ( 
      perldoc_url_prefix => '',
    );
    $pp->output_string (\$markdown);
    $pp->parse_file ($f);

    $markdown =~ s/\]\((\S+)\)/\]\($1.md\)/goms;

#   print &Dumper (\$markdown);

    'FileHandle'->new (">doc/$perl.md")->print ($markdown);

  }

$fh->close ();

