#!/usr/bin/perl -w

#
# Copyright 2022 Meteo-France
# All rights reserved
# philippe.marguinaud@meteo.fr
#

use local::lib;

use Getopt::Long;
use Data::Dumper;
use FileHandle;
use File::Basename;
use File::stat;
use File::Path;
use File::Spec;
use Storable;
use FindBin qw ($Bin);
use lib "$Bin/../lib";

use strict;

use Pointer::Parallel;
use Canonic;
use Fxtran;

my %opts = ('types-fieldapi-dir' => 'types-fieldapi', skip => 'PGFL,PGFLT1,PGMVT1,PGPSDT2D', 
            'types-constant-dir' => 'types-constant', 'post-parallel' => 'nullify', cycle => '49', 
            'types-fieldapi-non-blocked' => 'CPG_SL1F_TYPE,CPG_SL_MASK_TYPE', pragma => 'OpenACC',
            suffixParallel => '_PARALLEL', suffixSingleColumn => '_OPENACC');
my @opts_f = qw (help only-if-newer version stdout addYDCPG_OPTS redim-arguments stack84 use-acpy use-bcpy 
                 inline-contains gpumemstat contiguous merge-interfaces type-bound-methods);
my @opts_s = qw (skip types-fieldapi-dir types-constant-dir post-parallel dir cycle types-fieldapi-non-blocked files 
                 base style pragma suffixParallel suffixSingleColumn);

my @include = grep { m/^-I/o } @ARGV;
@ARGV = grep { ! m/^-I/o } @ARGV;

&GetOptions
(
  (map { ($_, \$opts{$_}) } @opts_f),
  (map { ("$_=s", \$opts{$_}) } @opts_s),
);

if ($opts{help})
  {
    print
     "Usage: " . &basename ($0) . "\n" .
      join ('', map { "  --$_\n" } @opts_f) .
      join ('', map { "  --$_=...\n" } @opts_f) .
     "\n";
    exit (0);
  }

for my $opt (qw (types-fieldapi-non-blocked))
  {
    $opts{$opt} = [split (m/,/o, $opts{$opt})];
  }

$opts{skip} = [split (m/,/o, $opts{skip} || '')];

$opts{pragma} = 'Pragma'->new (%opts);

$opts{nproma} = {};
$opts{jlon} = {};

my $F90 = shift;
(my $F90out = $F90) =~ s{.F90$}{lc ($opts{suffixParallel}) . '.F90'}eo;

unless ($opts{dir})
  {
    $opts{dir} = &dirname ($F90out);
  }

$F90out = 'File::Spec'->catpath ('', $opts{dir}, &basename ($F90out));

if ($opts{'only-if-newer'})
  {
    my $st = stat ($F90);
    my $stout = stat ($F90out);
    if ($st && $stout)
      {
        exit (0) unless ($st->mtime > $stout->mtime);
      }
  }

my $NAME = uc (&basename ($F90out, qw (.F90)));

my $find = 'Finder'->new (files => $opts{files}, base => $opts{base}, I => \@include);

my $types = &Storable::retrieve ("$opts{'types-fieldapi-dir'}/decls.dat");

&fxtran::setOptions (qw (Fragment -construct-tag -no-include -line-length 512));

my $d = &Fxtran::parse (location => $F90, fopts => [qw (-line-length 5000 -no-include -no-cpp -construct-tag -directive ACDC -canonic)]);

&Canonic::makeCanonic ($d);

$opts{style} = 'Style'->new (%opts, document => $d);

my @pu = &F ('./object/file/program-unit', $d);

for my $pu (@pu)
  {
    $opts{style}->preProcessForOpenACC ($pu, %opts);
  }

for my $pu (@pu)
  {
    &Pointer::Parallel::processSingleRoutine ($pu, $NAME, $find, $types, %opts);
  }

&Util::addVersion ($d)
  if ($opts{version});

if ($opts{stdout})
  {
    print &Canonic::indent ($d);
  }
else
  {
    &Util::updateFile ($F90out, &Canonic::indent ($d));
  }



