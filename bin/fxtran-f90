#!/usr/bin/perl -w

#
# Copyright 2025 Meteo-France
# All rights reserved
# philippe.marguinaud@meteo.fr
#

use local::lib;
use Getopt::Long;
use FileHandle;
use Data::Dumper;
use File::Temp;
use File::Basename;
use File::Spec;
use File::Copy;
use FindBin qw ($Bin);
use Cwd;

use lib "$Bin/../lib";

use strict;

use Fxtran::Bt;
use Fxtran::F90Compiler;
use Fxtran::Util;

sub getMethodOptions
{
  my ($opts, $method) = @_;

  my $hopts = 'click'->getOptionList (package => $opts->{package}, method => $method);

  return
    map 
    { 
      my $key = my $opt = $_;

      my ($type, @v) = ('');
      if ($key =~ s/\!$//o)
        {
          $type = 'f'; # Flag
        }
      elsif ($key =~ s/=s$//o)
        {
          $type = 's'; # Value
        }
      if (defined ($opts->{$key})) # Option is set
        {
          if (($type eq 'f') && ($opts->{$key}))
            {
              push @v, "--$key" 
            }
          elsif (($type eq 'f') && (! $opts->{$key}))
            {
              push @v, "--no$key" 
            }
          elsif ($type eq 's')
            {
              push @v, "--$key", $opts->{$key};
            }
          else 
            {
              die $opt;
            }
        }
      @v
    } keys ($hopts);
}

sub runACDCMethod
{
  use FindBin qw ($Bin);

  my %args = @_;

  my ($opts, $ACDC, $obj, $F90) = @args{qw (opts ACDC obj F90)};

  my @f90flags = @{ $args{f90flags} };

  $ACDC =~ s/^(\w+)\s*//o;
  my $method = $1;

  my @cmd = ("$Bin/fxtran-gen", $method, &getMethodOptions ($opts, $method), split (m/\s+/o, $ACDC), $F90);
  
  &Fxtran::Util::runCommand (cmd => \@cmd, %$opts);

  &Fxtran::F90Compiler::compile (%args);
}

sub outline1
{
  shift;
  my %args = @_;

  my @cmd = @{ $args{cmd} };
  my $F90 = $args{F90};
  my @f90flags = @{ $args{f90flags} };
  my $opts = $args{opts};

  &Fxtran::Util::runCommand (cmd => [@cmd, $F90], %$opts);

  &Fxtran::F90Compiler::compile (%args);
}


my $package = 'generate';

for (my $i = 0; $i < $#ARGV; $i++)
  {
    if ($ARGV[$i] eq '--package')
      {
        $package = $ARGV[$i+1];
      }
  }

$package = 'Fxtran::' . ucfirst ($package);

&Fxtran::Util::loadModule ($package);

my $hopts = 'click'->getOptionList (package => $package);

my %opts = (package => $package);

my @opts_f = qw (dryrun help debug);
my @opts_s = qw (package);

&GetOptions
(
  (map
  {
    my $key = my $opt = $_; 
    $key =~ s/(?:=s|\!)$//o;
    $opts{$key} = $hopts->{$key};
    ($opt, \$opts{$key})
  }
  keys (%$hopts)),
  (map { ($_, \$opts{$_}) } @opts_f),
  (map { ("$_=s", \$opts{$_}) } @opts_s),
);


if ($opts{help})
  {
    print
     "Usage: " . &basename ($0) . "\n" .
      join ('', map { "  --$_\n" } @opts_f) .
      join ('', map { "  --$_=...\n" } @opts_f) .
     "\n";
    exit (0);
  }

my $f90compiler = shift (@ARGV);

my $c = grep { $_ eq '-c' } @ARGV;

unless ($c)
  {
    exec ($f90compiler, @ARGV) unless ($opts{dryrun});
    exit (0);
  }

# Absolute path for includes

my @argv;

for (my $i = 0; $i < scalar (@ARGV); $i++)
  {
    if ($ARGV[$i] eq '-I')
      {
        push @argv, '-I' . 'File::Spec'->rel2abs ($ARGV[$i+1]);
        $i++;
      }
    elsif (my ($inc) = ($ARGV[$i] =~ m/^-I(.*)$/o))
      {
        push @argv, '-I' . 'File::Spec'->rel2abs ($inc);
      }
    else
      {
        push @argv, $ARGV[$i];
      }
  }

@ARGV = @argv;

my @F90 = grep { m/\.(?:F90|F)$/io } @ARGV;
my @f90flags = grep { ! m/\.(?:F90|F)$/io } @ARGV;

my $cwd = &cwd ();
my $dir = (delete $opts{dir}) || '.';
my $tmp = delete $opts{tmp};

FILE: for my $F90 (@F90)
  {

    if ($tmp)
      {
        $dir = 'File::Temp'->newdir (CLEANUP => ! $opts{debug}, DIR => $opts{tmp});
      }

    chdir ($dir);

    $F90 = 'File::Spec'->rel2abs ($F90, $cwd);

    (my $obj = $F90) =~ s/\.(?:F90|F)$/.o/io;

    push @f90flags, "-I$cwd";

    my @text = do { my $fh = 'FileHandle'->new ("<$F90"); <$fh> };

    if (my ($ACDC) = map { m/^\!\$ACDC (\S.*)$/o ? ($1) : () } @text)
      {
        goto NORMAL if ($ACDC =~ m/\{\s*$/o);

        &runACDCMethod
        (
          obj => $obj, f90compiler => $f90compiler, F90 => $F90, opts => \%opts,
          f90flags => \@f90flags, cwd => $cwd, ACDC => $ACDC,
        );

        next FILE;

      }

NORMAL:

    &Fxtran::F90Compiler::run 
    (
      f90compiler => $f90compiler, 
      f90flags    => \@f90flags, 
      obj         => $obj, 
      F90         => [$F90], 
      %opts
    );
  }

for my $mod (<*.mod>, <*.smod>)
  {
    &move ($mod, "$cwd/$mod");
  }



